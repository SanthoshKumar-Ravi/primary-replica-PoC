/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.poc.readreplica.api;

import com.poc.readreplica.api.model.Person;
import com.poc.readreplica.api.model.PersonInput;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-08-18T11:27:03.653348+03:00[Asia/Riyadh]")
@Validated
@Tag(name = "Person", description = "the Person API")
public interface PersonApi {

    /**
     * GET /person : Retrieve all persons
     *
     * @return A list of persons (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "personGet",
        summary = "Retrieve all persons",
        tags = { "Person" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of persons", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Person.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/person",
        produces = { "application/json" }
    )
    ResponseEntity<List<Person>> personGet(
        
    );


    /**
     * POST /person : Save a new Person
     *
     * @param personInput  (required)
     * @return Person created successfully (status code 201)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "personPost",
        summary = "Save a new Person",
        tags = { "Person" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Person created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Person.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/person",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Person> personPost(
        @Parameter(name = "PersonInput", description = "", required = true) @Valid @RequestBody PersonInput personInput
    );

}
